#!/bin/bash
#
# Copyright 2019 Thomas Nyman <thomas.nyman@iki.fi>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Prepare tarball of tex document for arXiv submission, stripping any comments.
#
# Usage: arxivprep [TEXNAME[.tex]]
# 
# If a TeX typesetter is available, arxivprep attempts to determine document
# dependencies automatically by examining the list of input and output files
# generated by the -recorder option of modern versions of latex (and pdflatex,
# xelatex, lualatex, etc).
# 
# If TEXNAME if specified it is used as the main document when determining
# document dependencies. If omitted, document dependencies are determined from
# the first .tex file (in alphanumeric order) in the current directory.
#
# If a suitable TeX typesetter is not installed, arxivprep will include any
# .tex, .bbl, .sty, .cls, .pdf, .jp(e)g, and .png files in subtree relative
# to TEXNAME (or the current directory if TEXNAME is omitted).
#
# The behavior of the script can be modified by setting the value of environment
# variables the script recognizes, e.g. TEXFILES=paper.tex arxivprep
#
# arxivprep respects the following environment variables:
#
# TYPESETTER  TeX typesetter used for automatic document dependency detection.
#             Must support -recorder option. Defaults to pdflatex. 
#
# LATEXFLAGS  Additional command line flags passed to TYPESETTER.
#
# OUTFILE     Pathname of output tarball to be created.
#
# TMPDIR      Pathname to directory where to place temporary files. 
#
# AUXDIR      Pathname to directory used to store auxiliary files generated
#             during document dependency detection. Setting this environment
#             variable will cause auxiliary files to be left in the specified
#             directory.
#
# TARDIR      Pathname to directory used to store processed files included in
#             tarball. Setting this environment variable will cause processed
#             files to be left in the specified directory.
#
# STRIPTEXCOMMENT Commandline used to invoke striptexcomments script.
# 
# The following environment variables can be used to override automatically
# detected document dependencies.
# 
# INPUTS      List of files to include in tarball.
#
# TEXFILES    Tex files (.tex) to strip from comments and include in tarball.
#
# BBLFILES    Bibliography (.bbl) files to include in tarball.
#
# PKGFILES    Tex class and style files (.cls and .sty) to include in tarball.
#
# FIGFILES    Figure files to include in tarball (default: .pdf, .jp(e)g, .png)
#
set -e

# Reliable way to get full path to script
# http://stackoverflow.com/questions/4774054/
readonly SCRIPTPATH=$(cd $(dirname ${BASH_SOURCE[0]}) > /dev/null; pwd -P )

# User modifiable constants
readonly TYPESETTER=${TYPESETTER:-"pdflatex"}
readonly LATEXFLAGS=${LATEXFLAGS:--halt-on-error -interaction=batchmode -draftmode}

readonly OUTFILE=${OUTFILE:-$(basename $PWD)_arxiv.tar.gz}
readonly TMPDIR=${TMPDIR:-/tmp}/$(basename $0).$$
readonly AUXDIR=${AUXDIR:-"${TMPDIR}/aux"}
readonly TARDIR=${TARDIR:-"${TMPDIR}/tar"}

readonly STRIPTEXCOMMENTS=${STRIPTEXCOMMENTS:-"python $SCRIPTPATH/striptexcomments --encoding utf-8"}

# Error values
readonly E_TYPESET_FAILED=250
readonly E_MKDIR_FAILED=251
readonly E_CP_FAILED=252
readonly E_RM_FAILED=253
readonly E_TAR_FAILED=254
readonly E_STRIPTEXCOMMENTS=255

# Utility functions
error() {
  printf >&2 '%b\n' "$(basename ${0}): ${@:2}"
  exit ${1}
}

warning() {
  printf >&2 '%b\n' "$(basename ${0}): ${@:1}"
}

cleanup() {
  if [[ -d "${TMPDIR}" ]]; then
    rm -r "${TMPDIR}" || error $E_RM_FAILED "failed to remove '$TMPDIR'"
  fi
}

main() {
  local texname=${1:-"$(set -- *.tex; echo "${1}")"}
  local -r texname=${texname%.tex}

  # Prepare temporary directory
  if [[ ! -d "${TMPDIR}" ]]; then
    mkdir -p "${TMPDIR}" || error $E_MKDIR_FAILED "failed to create '$TMPDIR'"
  fi
  
  # Run cleanup routine on exit
  trap cleanup EXIT
  
  # Determine document dependencies automatically by examining the list of input
  # and output files generated by the -recorder option of modern versions of
  # latex (and pdflatex, xelatex, lualatex, etc). In (most) modern versions of
  # these programs, this results in a .fls file containing a list of the files
  # that these programs have read (prepended by INPUT) and written (prepended by
  # OUTPUT).
  if command -v "${TYPESETTER}" &> /dev/null; then  # Typesetter is available
    # Prepare directory for auxiliary files
    if [[ ! -d "${AUXDIR}" ]]; then
      mkdir -p "${AUXDIR}" || error $E_MKDIR_FAILED "failed to create '$AUXDIR'"
    fi
    
    ${TYPESETTER} ${LATEXFLAGS} -recorder -output-directory "${AUXDIR}" "${texname}" > /dev/null || error $E_TYPESET_FAILED "failed to run '${TYPESETTER}'"
    
    # Look for .bbl files for $texname. Bibliographies do no show up in recorded
    # dependencies before a .bbl file has been generated. If found, inject INPUT
    # line for .bbl in the .fls processing below.
    if [[ -f "${texname}.bbl" ]]; then
      local -r bblinput="INPUT ${texname}.bbl"
    fi
    
    # Extract unique INPUT files in the current directory subtree
    local -r inputs=(${INPUTS:-$(awk '/^INPUT / && !/^INPUT [!\/]/ { sub(/^INPUT (\.\/)?/, ""); print }' "${AUXDIR}/${texname}.fls" <(echo "${bblinput}") | sort | uniq)})
    
  else  # Typesetter is not available
    warning "${TYPESETTER} not found; using pattern matching to identify input files"
    
    local -r inputs=${INPUTS:-$(find $(dirname "$texname") -iname '*.tex' \
      -o -iname '*.bbl' \
      -o -iname '*.cls' \
      -o -iname '*.sty' \
      -o -iname '*.pdf' \
      -o -iname '*.jpeg'\
      -o -iname '*.jpg' \
      -o -iname '*.png')}
  fi
  
  local -r texfiles=(${TEXFILES:-$(printf -- '%s\n' "${inputs[@]}" | grep -E "\.tex$")})
  local -r bblfiles=(${BBLFILES:-$(printf -- '%s\n' "${inputs[@]}" | grep -E "\.bbl$")})
  local -r pkgfiles=(${PKGFILES:-$(printf -- '%s\n' "${inputs[@]}" | grep -E "\.cls$|\.sty$")})
  local -r figfiles=(${FIGFILES:-$(printf -- '%s\n' "${inputs[@]}" | grep -E "\.pdf$|\.jpeg$|\.jpg$|\.png$")})
  
  # Process tex files
  for texfile in ${texfiles[@]}; do
    mkdir -p $(dirname "$TARDIR/$texfile") || error $E_MKDIR_FAILED "failed to create '$(dirname "$TARDIR/$texfile")'"
    $($STRIPTEXCOMMENTS "$texfile" > "$TARDIR/$texfile") || error $E_STRIPTEXCOMMENTS 'failed to strip comments from '$texfile''
  done

  # Check for presence of bbl file
  if [ -z "${bblfiles}" ]; then
    warning 'arXiv does not run BibTeX in the auto-TeXing procedure, include .bbl files if you use BibTeX'
  fi

  # Copy other files to temporary directory
  for file in ${bblfiles[@]} ${pkgfiles[@]} ${figfiles[@]}; do
    cp --parents "$file" "$TARDIR/" || error $E_CP_FAILED "failed to copy '$file' to '$TARDIR'"
  done

  # Create tarball
  tar czvf "$OUTFILE" -C "$TARDIR" . || error $E_TAR_FAILED "failed to create tarball '$OUTFILE'"
}

main "$@"

